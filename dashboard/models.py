from django.db import models
from django.conf import settings
from django.utils import timezone
from django.db.models import Q

class DashboardStats(models.Model):
    """Store daily statistics for dashboard"""
    date = models.DateField(unique=True)
    
    # Flight Statistics
    total_flights = models.PositiveIntegerField(default=0)
    departed_flights = models.PositiveIntegerField(default=0)
    delayed_flights = models.PositiveIntegerField(default=0)
    cancelled_flights = models.PositiveIntegerField(default=0)
    
    # Passenger Statistics
    total_passengers = models.PositiveIntegerField(default=0)
    checked_in_passengers = models.PositiveIntegerField(default=0)
    
    # Booking Statistics
    total_bookings = models.PositiveIntegerField(default=0)
    confirmed_bookings = models.PositiveIntegerField(default=0)
    cancelled_bookings = models.PositiveIntegerField(default=0)
    
    # Revenue Statistics
    total_revenue = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    economy_revenue = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    business_revenue = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    first_class_revenue = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    
    # Gate Statistics
    active_gates = models.PositiveIntegerField(default=0)
    occupied_gates = models.PositiveIntegerField(default=0)
    maintenance_gates = models.PositiveIntegerField(default=0)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Dashboard Stats - {self.date}"
    
    class Meta:
        ordering = ['-date']
        verbose_name_plural = "Dashboard Statistics"

class UserActivity(models.Model):
    """Track user activities for audit and dashboard purposes"""
    ACTION_CHOICES = [
        ('login', 'User Login'),
        ('logout', 'User Logout'),
        ('booking_created', 'Booking Created'),
        ('booking_cancelled', 'Booking Cancelled'),
        ('check_in', 'Check-in Completed'),
        ('boarding_pass_generated', 'Boarding Pass Generated'),
        ('flight_created', 'Flight Created'),
        ('flight_updated', 'Flight Updated'),
        ('flight_cancelled', 'Flight Cancelled'),
        ('announcement_created', 'Announcement Created'),
        ('user_registered', 'User Registered'),
        ('profile_updated', 'Profile Updated'),
        ('password_changed', 'Password Changed'),
    ]
    
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='activities')
    action = models.CharField(max_length=30, choices=ACTION_CHOICES)
    description = models.TextField(blank=True)
    ip_address = models.GenericIPAddressField(null=True, blank=True)
    user_agent = models.TextField(blank=True)
    
    # Related objects (optional)
    booking = models.ForeignKey('bookings.Booking', on_delete=models.SET_NULL, null=True, blank=True)
    flight = models.ForeignKey('flights.Flight', on_delete=models.SET_NULL, null=True, blank=True)
    
    timestamp = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.user.username} - {self.get_action_display()} at {self.timestamp}"
    
    class Meta:
        ordering = ['-timestamp']

class SystemAlert(models.Model):
    """System-wide alerts for administrators"""
    ALERT_TYPE_CHOICES = [
        ('info', 'Information'),
        ('warning', 'Warning'),
        ('error', 'Error'),
        ('critical', 'Critical'),
    ]
    
    CATEGORY_CHOICES = [
        ('system', 'System'),
        ('security', 'Security'),
        ('maintenance', 'Maintenance'),
        ('performance', 'Performance'),
        ('booking', 'Booking'),
        ('flight', 'Flight'),
    ]
    
    title = models.CharField(max_length=200)
    message = models.TextField()
    alert_type = models.CharField(max_length=10, choices=ALERT_TYPE_CHOICES, default='info')
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, default='system')
    
    is_resolved = models.BooleanField(default=False)
    resolved_at = models.DateTimeField(null=True, blank=True)
    resolved_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='resolved_alerts')
    
    auto_generated = models.BooleanField(default=False)  # True if generated by system
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='created_alerts', null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def resolve(self, user=None):
        self.is_resolved = True
        self.resolved_at = timezone.now()
        if user:
            self.resolved_by = user
        self.save()
    
    def __str__(self):
        return f"{self.get_alert_type_display()}: {self.title}"
    
    class Meta:
        ordering = ['-created_at']

class QuickAction(models.Model):
    """Quick actions for different user roles on dashboard"""
    title = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    icon = models.CharField(max_length=50, help_text="CSS class for icon")
    url_name = models.CharField(max_length=100, help_text="Django URL name")
    color = models.CharField(max_length=20, default='primary', help_text="Bootstrap color class")
    
    # Role-based access
    available_for_admin = models.BooleanField(default=False)
    available_for_staff = models.BooleanField(default=False)
    available_for_airline_staff = models.BooleanField(default=False)
    available_for_passenger = models.BooleanField(default=False)
    
    order = models.PositiveIntegerField(default=0)
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def is_available_for_user(self, user):
        if user.is_admin:
            return self.available_for_admin
        elif user.is_staff_member:
            return self.available_for_staff
        elif user.is_airline_staff:
            return self.available_for_airline_staff
        elif user.is_passenger:
            return self.available_for_passenger
        return False
    
    def __str__(self):
        return self.title
    
    class Meta:
        ordering = ['order', 'title']
